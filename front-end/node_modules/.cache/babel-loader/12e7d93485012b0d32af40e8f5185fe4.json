{"ast":null,"code":"import _regeneratorRuntime from \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/src/components/AddReview.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nmutation($review: String!, $title: String!, $username: String!) {\\n  addReview(review: $review, title: $title, username: $username){\\n    review\\n  }\\n}\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport { GetMovie } from './MovieReviews';\nimport { CurrentUserQuery } from './auth/User';\nimport { AddMovie } from './AddToFavorites';\nvar ReviewMovie = gql(_templateObject());\nvar initalState = {\n  review: \"\"\n};\n\nvar AddReview =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddReview, _Component);\n\n  function AddReview() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AddReview);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AddReview)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = _objectSpread({}, initalState);\n\n    _this.handleChange = function (e) {\n      var _e$target = e.target,\n          name = _e$target.name,\n          value = _e$target.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleSubmit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e, addMovie, addReview) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                e.preventDefault();\n                _context2.next = 3;\n                return addMovie().then(\n                /*#__PURE__*/\n                function () {\n                  var _ref3 = _asyncToGenerator(\n                  /*#__PURE__*/\n                  _regeneratorRuntime.mark(function _callee(_ref2) {\n                    var data, movie;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            data = _ref2.data;\n                            _context.next = 3;\n                            return data.addMovie;\n\n                          case 3:\n                            movie = _context.sent;\n                            _context.next = 6;\n                            return addReview();\n\n                          case 6:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee, this);\n                  }));\n\n                  return function (_x4) {\n                    return _ref3.apply(this, arguments);\n                  };\n                }());\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.clearForm = function () {\n      _this.setState(_objectSpread({}, initalState));\n    };\n\n    return _this;\n  }\n\n  _createClass(AddReview, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          username = _this$props.username,\n          title = _this$props.title,\n          movieDBId = _this$props.movieDBId,\n          posterPath = _this$props.posterPath;\n      var review = this.state.review;\n      return React.createElement(Mutation, {\n        mutation: AddMovie,\n        variables: {\n          title: title,\n          movieDBId: movieDBId,\n          posterPath: posterPath\n        },\n        refetchQueries: [{\n          query: GetMovie,\n          variables: {\n            movieDBId: movieDBId\n          }\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, function (addMovie) {\n        return React.createElement(Mutation, {\n          mutation: ReviewMovie,\n          variables: {\n            title: title,\n            username: username,\n            review: review\n          },\n          refetchQueries: [{\n            query: GetMovie,\n            variables: {\n              movieDBId: movieDBId\n            }\n          }, {\n            query: CurrentUserQuery\n          }],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, function (addReview, _ref4) {\n          var loading = _ref4.loading,\n              error = _ref4.error;\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67\n            },\n            __self: this\n          }, React.createElement(\"form\", {\n            id: \"addReview\",\n            onSubmit: function onSubmit(e) {\n              return _this2.handleSubmit(e, addReview, addMovie);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          }, React.createElement(\"textarea\", {\n            onChange: _this2.handleChange,\n            name: \"review\",\n            cols: \"100\",\n            rows: \"5\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69\n            },\n            __self: this\n          }), React.createElement(\"button\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          }, \"Add\", loading ? \"ing\" : \"\", \" Review\")), error && error.message);\n        });\n      });\n    }\n  }]);\n\n  return AddReview;\n}(Component);\n\nexport default AddReview;","map":{"version":3,"sources":["/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/src/components/AddReview.js"],"names":["React","Component","gql","Mutation","GetMovie","CurrentUserQuery","AddMovie","ReviewMovie","initalState","review","AddReview","state","handleChange","e","target","name","value","setState","handleSubmit","addMovie","addReview","preventDefault","then","data","movie","clearForm","props","username","title","movieDBId","posterPath","query","variables","loading","error","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\n\nimport { GetMovie } from './MovieReviews';\nimport { CurrentUserQuery } from './auth/User';\nimport { AddMovie } from './AddToFavorites';\n\n\nconst ReviewMovie = gql`\nmutation($review: String!, $title: String!, $username: String!) {\n  addReview(review: $review, title: $title, username: $username){\n    review\n  }\n}`;\n\nconst initalState = {\n    review: \"\"\n}\nclass AddReview extends Component {\n    state = {\n        ...initalState\n    }\n    handleChange = (e) => {\n        const {name, value} = e.target;\n        this.setState({\n            [name] :value\n        })\n    }\n    handleSubmit = async (e, addMovie,addReview) => {\n        e.preventDefault();\n        await addMovie().then(async ({data}) =>{\n             const movie = await data.addMovie;\n             await addReview();\n            \n        });\n    }\n    clearForm = () => {\n        this.setState({\n            ...initalState\n        })\n    }\n  render() {\n      const { username, title, movieDBId, posterPath } = this.props;\n      const { review } = this.state;\n    return (\n        <Mutation mutation={AddMovie}\n        variables={{\n            title,\n            movieDBId,\n            posterPath\n        }}\n        refetchQueries={[ {query: GetMovie, variables:{movieDBId}}]}\n        >\n        {(addMovie) => {\n            return(\n        <Mutation \n        mutation={ReviewMovie}\n        variables={{\n        title,\n        username, \n        review}}\n        refetchQueries={[ {query: GetMovie, variables:{movieDBId}}, {query: CurrentUserQuery} ]}\n        >\n        {(addReview, {loading, error }) => {\n            return(\n        <div>\n            <form id=\"addReview\" onSubmit={(e) => this.handleSubmit(e, addReview, addMovie)}>\n                <textarea onChange={this.handleChange} name=\"review\" cols=\"100\" rows=\"5\" />\n                <button>Add{loading ? \"ing\" : \"\"} Review</button>\n            </form>\n            {error && error.message}\n        </div>\n            )}}\n        </Mutation>\n            )}}\n        </Mutation>\n    )\n  }\n}\nexport default AddReview;"]},"metadata":{},"sourceType":"module"}