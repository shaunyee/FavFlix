{"ast":null,"code":"import _regeneratorRuntime from \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/src/components/SeenMovie.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation($title: String!, $movieDBId: Int!, $posterPath: String!){\\n        addMovie(title: $title, movieDBId: $movieDBId, posterPath: $posterPath){\\n            title\\n            posterPath\\n            movieDBId\\n        }\\n    }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    mutation($movieDBId: Int!){\\n        seenMovie(movieDBId: $movieDBId){\\n            movieDBId\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { CurrentUserQuery } from './auth/User';\nimport { GetMove } from './MovieDetail';\nvar UserSeenMovie = gql(_templateObject());\nvar AddMovie = gql(_templateObject2());\n\nvar SeenMovie = function SeenMovie(_ref) {\n  var movie = _ref.movie;\n\n  var movieSeen =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(addMovie, seenMovie) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return addMovie();\n\n            case 2:\n              _context.next = 4;\n              return seenMovie();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function movieSeen(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(Mutation, {\n    mutation: AddMovie,\n    variables: {\n      title: movie.title,\n      movieDBId: movie.id,\n      posterPath: movie.poster_path\n    },\n    refetchQueries: [{\n      query: GetMove\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, function (addMovie) {\n    return React.createElement(Mutation, {\n      mutation: UserSeenMovie,\n      variables: {\n        movieDBId: movie.id\n      },\n      refetchQueries: [{\n        query: CurrentUserQuery\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, function (seenMovie) {\n      return React.createElement(\"button\", {\n        onClick: function onClick() {\n          return movieSeen(addMovie, seenMovie);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Ive Seen it!!\");\n    });\n  });\n};\n\nexport default SeenMovie;","map":{"version":3,"sources":["/Users/yeezy/Desktop/projects/graphql-apollo/projects/movies2/front-end/src/components/SeenMovie.js"],"names":["React","Mutation","gql","CurrentUserQuery","GetMove","UserSeenMovie","AddMovie","SeenMovie","movie","movieSeen","addMovie","seenMovie","title","movieDBId","id","posterPath","poster_path","query"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,OAAT,QAAwB,eAAxB;AAEA,IAAMC,aAAa,GAAIH,GAAJ,mBAAnB;AAQA,IAAMI,QAAQ,GAAGJ,GAAH,oBAAd;;AAUA,IAAMK,SAAS,GAAG,SAAZA,SAAY,OAAa;AAAA,MAAXC,KAAW,QAAXA,KAAW;;AAC3B,MAAMC,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG,iBAAOC,QAAP,EAAiBC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACRD,QAAQ,EADA;;AAAA;AAAA;AAAA,qBAERC,SAAS,EAFD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATF,SAAS;AAAA;AAAA;AAAA,KAAf;;AAIF,SACE,oBAAC,QAAD;AACA,IAAA,QAAQ,EAAEH,QADV;AAEA,IAAA,SAAS,EAAE;AAACM,MAAAA,KAAK,EAAEJ,KAAK,CAACI,KAAd;AAAqBC,MAAAA,SAAS,EAAEL,KAAK,CAACM,EAAtC;AAA0CC,MAAAA,UAAU,EAAEP,KAAK,CAACQ;AAA5D,KAFX;AAGA,IAAA,cAAc,EAAE,CAAC;AAACC,MAAAA,KAAK,EAAEb;AAAR,KAAD,CAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKK,UAACM,QAAD;AAAA,WACG,oBAAC,QAAD;AACA,MAAA,QAAQ,EAAEL,aADV;AAEA,MAAA,SAAS,EAAE;AAACQ,QAAAA,SAAS,EAAEL,KAAK,CAACM;AAAlB,OAFX;AAGA,MAAA,cAAc,EAAE,CAAC;AAACG,QAAAA,KAAK,EAAEd;AAAR,OAAD,CAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKK,UAACQ,SAAD;AAAA,aACG;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAMF,SAAS,CAACC,QAAD,EAAWC,SAAX,CAAf;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADH;AAAA,KALL,CADH;AAAA,GALL,CADF;AAqBD,CA1BD;;AA4BA,eAAeJ,SAAf","sourcesContent":["import React from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport { CurrentUserQuery } from './auth/User';\nimport { GetMove } from './MovieDetail';\n\nconst UserSeenMovie =  gql`\n    mutation($movieDBId: Int!){\n        seenMovie(movieDBId: $movieDBId){\n            movieDBId\n        }\n    }\n`;\n\nconst AddMovie = gql`\n    mutation($title: String!, $movieDBId: Int!, $posterPath: String!){\n        addMovie(title: $title, movieDBId: $movieDBId, posterPath: $posterPath){\n            title\n            posterPath\n            movieDBId\n        }\n    }\n`;\n\nconst SeenMovie = ({movie}) => {\n    const movieSeen = async (addMovie, seenMovie) => {\n        await addMovie();\n        await seenMovie();\n    }\n  return (\n    <Mutation \n    mutation={AddMovie}\n    variables={{title: movie.title, movieDBId: movie.id, posterPath: movie.poster_path}}\n    refetchQueries={[{query: GetMove}]}\n    >\n        {(addMovie) => (\n            <Mutation \n            mutation={UserSeenMovie}\n            variables={{movieDBId: movie.id}}\n            refetchQueries={[{query: CurrentUserQuery}]}\n            >\n                {(seenMovie) =>(\n                    <button onClick={() => movieSeen(addMovie, seenMovie)}>\n                        Ive Seen it!!\n                    </button>\n                )}\n            </Mutation>\n        )}\n    </Mutation>\n  )\n}\n\nexport default SeenMovie;"]},"metadata":{},"sourceType":"module"}